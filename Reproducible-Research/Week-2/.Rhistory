install.packages("KernSmooth")
library(KernSmooth)
swirl()
library(swirl)
swirl()
dim(pm0)
head(pm0)
names(pm0)
print(cnmaes)
print(cnames)
strsplit(cnames, '|', fixed = T)
strsplit(cnames, '|', fixed = TRUE)
cnames <- strsplit(cnames, '|', fixed = TRUE)
cnmes
cnames
names(pm0) <- cnames[[1]][wcol]
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm = T)
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, pm0$State.Code == 36 & pm0$county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
om0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date, "%Y%m%d"))
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1, 2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(lwd = 2, median(x0sub, na.rm = TRUE))
?abline
abline(a = median(x0sub, na.rm = TRUE), lwd = 2)
abline(a = median(x0sub, na.rm = TRUE))
abline(x0sub)
abline(a = median(x0sub, na.rm = TRUE), b = median(x1sub, na.rm = TRUE))
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <-with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <-with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- date.frame(names(mn0), mean(mn0))
d0 <- date.frame(state = names(mn0), mean = mn0)
d0 <- as.date.frame(state = names(mn0), mean = mn0)
d0 <- date.frame(state = names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 52), mrg[,2], range(x), xlim = c(.5,2,.5)))
with(mrg, plot(rep(1, 52), mrg[,2], xlim = c(.5,2,.5)))
with(mrg, plot(rep(1, 52), mrg[,2], xlim = c(.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), rep(2,52), mrg[,2], mrg[,3])
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
setwd("~/Documents/Git/DataScience-Coursera/Reproducible-Research/Week-2")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("activity.csv")
View(data)
knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
library(ggplot2)
library(scales)
data <- read.csv("activity.csv")
missing <- length(which(is.na(data$steps)))
missing <- length(which(is.na(data$steps)))
missing
imputed.data <- data
imputed.data$steps <- impute(data$steps, fun = median)
View(imputed.data)
missing <- length(which(is.na(data$steps)))
missing
imputed.data <- data
imputed.data$steps <- impute(data$steps, fun = median)
stepsbydayImputed <- tapply(imputed.data$steps, imputed.data$data, sum)
missing <- length(which(is.na(data$steps)))
missing
imputed.data <- data
imputed.data$steps <- impute(data$steps, fun = median)
stepsbydayImputed <- tapply(imputed.data$steps, imputed.data$date, sum)
qplot(stepsbydayImputed, xlab = 'Total steps per day (Imputed)', ylab='Frequency using binwith 500', binwidth=500)
missing <- length(which(is.na(data$steps)))
missing
imputed.data <- data
imputed.data$steps <- impute(data$steps, fun = median)
stepsbydayImputed <- tapply(imputed.data$steps, imputed.data$date, sum)
qplot(stepsbydayImputed, xlab = 'Total steps per day (Imputed)', ylab='Frequency using binwith 500')
missing <- length(which(is.na(data$steps)))
missing
imputed.data <- data
imputed.data$steps <- impute(data$steps, fun = median)
stepsbydayImputed <- tapply(imputed.data$steps, imputed.data$date, sum)
qplot(stepsbydayImputed, xlab = 'Total steps per day (Imputed)', ylab='Frequency using binwith 500', binwidth=400)
missing <- length(which(is.na(data$steps)))
missing
imputed.data <- data
imputed.data$steps <- impute(data$steps, fun = median)
stepsbydayImputed <- tapply(imputed.data$steps, imputed.data$date, sum)
qplot(stepsbydayImputed, xlab = 'Total steps per day (Imputed)', ylab='Frequency using binwith 400', binwidth=400)
missing <- length(which(is.na(data$steps)))
missing
imputed.data <- data
imputed.data$steps <- impute(data$steps, fun = median)
stepsbydayMean <- mean(imputed.data$steps)
stepsbydayMedian <- median(imputed.data$steps)
missing <- length(which(is.na(data$steps)))
imputed.data <- data
imputed.data$steps <- impute(data$steps, fun = median)
stepsbydayMean <- mean(imputed.data$steps)
stepsbydayMedian <- median(imputed.data$steps)
stepsbydayImputed <- tapply(imputed.data$steps, imputed.data$date, sum)
qplot(stepsbydayImputed, xlab = 'Total steps per day (Imputed)', ylab='Frequency using binwith 400', binwidth=400)
stepsbyday <- tapply(data$steps, data$date, sum, na.rm = T)
qplot(stepsbyday, xlab='Total steps per day', ylab='Frequency using binwith 400', binwidth=400)
stepsbydayMean <- mean(data$steps)
stepsbydayMedian <- median(data$steps)
View(data)
avgstepstimeblock <- aggregate(x=list(meanSteps = data$steps), by=list(interval=data$interval), FUN=mean, na.rm=TRUE)
View(avgstepstimeblock)
avgstepstimeblock <- aggregate(x=list(meanSteps = data$steps), by=list(interval=data$interval), FUN=mean, na.rm=TRUE)
## Time series plot
ggplot(data=averageStepsPerTimeBlock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("Average # steps taken")
avgstepstimeblock <- aggregate(x=list(meanSteps = data$steps), by=list(interval=data$interval), FUN=mean, na.rm=TRUE)
## Time series plot
ggplot(data=avgstepstimeblock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("Average # steps taken")
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps
mostSteps <- which.max(avgstepstimeblock$meanSteps)
timeMostSteps <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", avgstepstimeblock[mostSteps,'interval'])
print("Most Steps at: " + timeMostSteps)
avgstepstimeblock <- aggregate(x=list(meanSteps = data$steps), by=list(interval=data$interval), FUN=mean, na.rm=TRUE)
## Time series plot
ggplot(data=avgstepstimeblock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("Average # steps taken")
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps
mostSteps <- which.max(avgstepstimeblock$meanSteps)
timeMostSteps <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", avgstepstimeblock[mostSteps,'interval'])
print("Most Steps at: " + str(timeMostSteps))
avgstepstimeblock <- aggregate(x=list(meanSteps = data$steps), by=list(interval=data$interval), FUN=mean, na.rm=TRUE)
## Time series plot
ggplot(data=avgstepstimeblock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("Average # steps taken")
## Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps
mostSteps <- which.max(avgstepstimeblock$meanSteps)
timeMostSteps <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", avgstepstimeblock[mostSteps,'interval'])
timeMostSteps
stepsbyday <- tapply(data$steps, data$date, sum, na.rm = T)
## Histogram depicting total number of steps taken each day
qplot(stepsbyday, xlab='Total steps per day', ylab='Frequency using binwith 400', binwidth=400)
## Mean and median of total number of steps taken per day
stepsbydayMean <- mean(data$steps)
stepsbydayMedian <- median(data$steps)
print("Steps taken per day for original data (mean): " + stepsbydayMean)
library(knitr)
knit_with_parameters('~/Documents/Git/DataScience-Coursera/Reproducible-Research/Week-2/𝙿𝙰𝟷_𝚝𝚎𝚖𝚙𝚕𝚊𝚝𝚎.Rmd')
library(markdown)
knit('PA1_template.Rmd')
setwd("~/Documents/Git/DataScience-Coursera/Reproducible-Research/Week-2")
knit('PA1_template.Rmd')
knit('PA1_template.Rmd')
markdownToHTML("PA1_template.md", "PA1_template.html",fragment.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
stepsbyday <- tapply(data$steps, data$date, sum, na.rm = T)
## Histogram depicting total number of steps taken each day
qplot(stepsbyday, xlab='Total steps per day', ylab='Frequency using binwith 400', binwidth=400)
mean(stepsbyday, na.rm = T)
median(stepsbyday, na.rm = T)
## Find the number of missing values in the data
missing <- length(which(is.na(data$steps)))
missing
## Impute the missing values
imputed.data <- data
imputed.data$steps <- impute(data$steps, fun = median)
## Calculate the mean and median of the steps taken per day in the imputed data
stepsbydayimputedMean <- mean(imputed.data$steps)
stepsbydayimputedMean
stepsbydayimputedMedian <- median(imputed.data$steps)
stepsbydayimputedMedian
knit('PA1_template.Rmd')
install.packages("gridExtra")
install.packages("gridExtra")
